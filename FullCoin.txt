pragma solidity ^0.4.16;

contract owned{
    address public owner;
    
    function owned() public{
        owner = msg.sender;
    }
    
    modifier onlyOwner{
        require(msg.sender==owner);
        _;
    }
    
    function transferOwnership(address newOwner) public onlyOwner{
        owner = newOwner;
    }
}
//-----------------------------------------------------------------------

interface tokenRecipient{
    function receiveApproval(address _from, uint256 _value, 
            address _token, bytes _extraData) public;
}
//------------------------------------------------------------------------

contract BaseToken{
    // PUBLIC INNER VAIRABLE(s)
    string public name;
    string public symbol;
    // default 18 digits are suggested, don't change it
    uint public decimals = 18;
    uint256 public totalSupply;
    // creates an array with all balances
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    // EVENTS(s)
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    
    // Constructor
    function BaseToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        // update total supply with the decimal amount
        totalSupply = initialSupply * 10 ** uint256(decimals);
        // give the creator all initial tokens
        balanceOf[msg.sender] = totalSupply;
        // set name and symbol for display purpose
        name = tokenName;
        symbol = tokenSymbol;
    }
    //**************************************************************************
    
    // internal(private) transfer function 
    function _transfer(address _from, address _to, uint _value) internal {
        // prevent transfter to 0x0 address. -> use burn() instead
        require(_to != 0x0);
        // check sender has enough coin to send
        require(balanceOf[_from] >= _value);
        // check for receiver overflow
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        // save for assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // do transaction
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        // static analysis -> this should never fail
        assert(previousBalances == balanceOf[_from] + balanceOf[_to]);
    }
    //*************************************************************************
    
    /*
     * Transfer Tokens
     * Send _value tokens to _to address from your account
    */
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    //*************************************************************************
    
    /*
     * Transfer tokens from other address
     * Send _value tokens to _to address in behalf of _from address
     * _from -> sender, _to -> recipient, _value -> amount
     */
    function transferFrom(address _from, address _to, uint256 _value) 
        public returns (bool success) {
        // check allowance
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    //*************************************************************************
    
    /**
     * Set allowance for other address
     *
     * Allows _spender to spend no more than _value tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    //*************************************************************************
    
    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, 
     * and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
    */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if(approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    //*************************************************************************
    
     /**
     * Destroy tokens
     *
     * Remove _value tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
    */
    function burn(uint256 _value) public returns(bool success) {
        // check if sender has enough
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        Burn(msg.sender, _value);
        return true;
    }
    //*************************************************************************
    
    /**
     * Destroy tokens from other account
     *
     * Remove _value tokens from the system irreversibly on behalf of _from.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
    */
    function burnFrom(address _from, uint256 _value) public returns(bool success) {
        // Check if the targeted balance is enough
        require(balanceOf[_from] >= _value);
        // Check allowance
        require(allowance[_from][msg.sender] >= _value);
        // Subtract from the targeted balance
        balanceOf[_from] -= _value;
        // Subtract from the sender's allowance
        allowance[_from][msg.sender] -= _value;
        // Update totalSupply
        totalSupply -= _value;
        Burn(_from, _value);
        return true;
    }
    //*************************************************************************
    
}
//---------------------------------------------------------------------------------------





