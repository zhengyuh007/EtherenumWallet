
address: 160 bit integer -> The same as address length in Ethereum
(the address in ethereum has length 40, each digit in range 0~15 -> 40x4bit = 160 bit)

//***************************************************************************************

Transfer is better than send

There are some dangers in using send: 
The transfer fails if the call stack depth is at 1024 (this can always be forced by the caller) 
and it also fails if the recipient runs out of gas. So in order to make safe Ether transfers, 
always check the return value of send, use transfer or even better: 
use a pattern where the recipient withdraws the money.

//***************************************************************************************

storage vs memory

https://cryptozombies.io/zh/lesson/2/chapter/7
storage -> permanent in blockchain, memory -> temporary
Storage 变量是指永久存储在区块链中的变量。 Memory 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 
你可以把它想象成存储在你电脑的硬盘或是RAM中数据的关系。

大多数时候你都用不到这些关键字，默认情况下 Solidity 会自动处理它们。 
状态变量（在函数之外声明的变量）默认为“存储”形式，并永久写入区块链；而在函数内部声明的变量是“内存”型的，它们函数调用结束后消失。

//***************************************************************************************

public, internal, external, private -> Four types for a function or variable of scope

internal -> like protected in Java (all contract inheritance from this can use)
external -> only can be called outside this contract (public can also be called inside this contract)

//***************************************************************************************

Solidity Time Unit

Solidity 使用自己的本地时间单位。
变量 now 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。我写这句话时 unix 时间是 1515527488。
注意：Unix时间传统用一个32位的整数进行存储。这会导致“2038年”问题，当这个32位的unix时间戳不够用，产生溢出，使用这个时间的遗留系统就麻烦了。
所以，如果我们想让我们的 DApp 跑够20年，我们可以使用64位整数表示时间，但为此我们的用户又得支付更多的 gas。真是个两难的设计啊！
Solidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。
下面是一些使用时间单位的实用案例：

uint lastUpdated;
// 将‘上次更新时间’ 设置为 ‘现在’
function updateTimestamp() public {
  lastUpdated = now;
}
// 如果到上次`updateTimestamp` 超过5分钟，返回 'true'
// 不到5分钟返回 'false'
function fiveMinutesHavePassed() public view returns (bool) {
  return (now >= (lastUpdated + 5 minutes));
}

//***************************************************************************************

In solidity every variable is set to 0 by default.
You should think of mappings as all possible combinations are set to 0 by default.

struct buyer{
       uint amount;
       Status status;
       }
mapping(address=>buyer) public buyers;

If u want to determine one address exist in buyers or not, u can use the following statment
if (buyers[msg.sender].amount == 0)

//***************************************************************************************
